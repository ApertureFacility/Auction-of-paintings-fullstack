services:
  backend:
    build: ./backend
    container_name: fastapi-backend
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      - db
      - mailhog
    networks:
      - app-network
    command: poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000

  frontend:
    build: ./frontend
    container_name: nextjs-frontend
    env_file:
      - ./frontend/.env.local
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000    
      - SERVER_API_URL=http://backend:8000       
    ports:
      - "3000:3000"
    command: npm run start
    networks:
      - app-network

  db:
    image: postgres:15
    container_name: postgres-db
    restart: always
    env_file:
      - ./backend/.env
    ports:
      - "5555:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - app-network

  db-init:
    image: postgres:15
    container_name: db-init
    depends_on:
      - db
    env_file:
      - ./backend/.env   
    volumes:
      - ./db/init:/docker-entrypoint-initdb.d
    entrypoint: >
      sh -c "
      until pg_isready -h db -p 5432 -U $${POSTGRES_USER}; do
        echo 'Waiting for db...';
        sleep 2;
      done;
      echo 'Applying backup.sql...';
      PGPASSWORD=$${POSTGRES_PASSWORD} psql -h db -U $${POSTGRES_USER} -d $${POSTGRES_DB} -f /docker-entrypoint-initdb.d/backup.sql
      "
    networks:
      - app-network
    restart: "no"

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"  
      - "8025:8025"  
    restart: unless-stopped
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
